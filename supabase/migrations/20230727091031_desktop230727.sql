create schema if not exists "next_auth";

create table "next_auth"."accounts" (
    "id" uuid not null default gen_random_uuid(),
    "type" text not null,
    "provider" text not null,
    "providerAccountId" text not null,
    "refresh_token" text,
    "access_token" text,
    "expires_at" bigint,
    "token_type" text,
    "scope" text,
    "id_token" text,
    "session_state" text,
    "oauth_token_secret" text,
    "oauth_token" text,
    "userId" uuid
);


create table "next_auth"."sessions" (
    "id" uuid not null default gen_random_uuid(),
    "expires" timestamp with time zone not null,
    "sessionToken" text not null,
    "userId" uuid
);


create table "next_auth"."users" (
    "id" uuid not null default gen_random_uuid(),
    "name" text,
    "email" text,
    "emailVerified" timestamp with time zone,
    "image" text,
    "userName" text not null default gen_unique_username()
);


create table "next_auth"."verification_tokens" (
    "identifier" text,
    "token" text not null,
    "expires" timestamp with time zone not null
);


CREATE UNIQUE INDEX accounts_pkey ON next_auth.accounts USING btree (id);

CREATE UNIQUE INDEX email_unique ON next_auth.users USING btree (email);

CREATE UNIQUE INDEX provider_unique ON next_auth.accounts USING btree (provider, "providerAccountId");

CREATE UNIQUE INDEX sessions_pkey ON next_auth.sessions USING btree (id);

CREATE UNIQUE INDEX sessiontoken_unique ON next_auth.sessions USING btree ("sessionToken");

CREATE UNIQUE INDEX token_identifier_unique ON next_auth.verification_tokens USING btree (token, identifier);

CREATE UNIQUE INDEX users_pkey ON next_auth.users USING btree (id);

CREATE UNIQUE INDEX "users_userName_key" ON next_auth.users USING btree ("userName");

CREATE UNIQUE INDEX verification_tokens_pkey ON next_auth.verification_tokens USING btree (token);

alter table "next_auth"."accounts" add constraint "accounts_pkey" PRIMARY KEY using index "accounts_pkey";

alter table "next_auth"."sessions" add constraint "sessions_pkey" PRIMARY KEY using index "sessions_pkey";

alter table "next_auth"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "next_auth"."verification_tokens" add constraint "verification_tokens_pkey" PRIMARY KEY using index "verification_tokens_pkey";

alter table "next_auth"."accounts" add constraint "accounts_userId_fkey" FOREIGN KEY ("userId") REFERENCES next_auth.users(id) ON DELETE CASCADE not valid;

alter table "next_auth"."accounts" validate constraint "accounts_userId_fkey";

alter table "next_auth"."accounts" add constraint "provider_unique" UNIQUE using index "provider_unique";

alter table "next_auth"."sessions" add constraint "sessions_userId_fkey" FOREIGN KEY ("userId") REFERENCES next_auth.users(id) ON DELETE CASCADE not valid;

alter table "next_auth"."sessions" validate constraint "sessions_userId_fkey";

alter table "next_auth"."sessions" add constraint "sessiontoken_unique" UNIQUE using index "sessiontoken_unique";

alter table "next_auth"."users" add constraint "email_unique" UNIQUE using index "email_unique";

alter table "next_auth"."users" add constraint "users_userName_key" UNIQUE using index "users_userName_key";

alter table "next_auth"."verification_tokens" add constraint "token_identifier_unique" UNIQUE using index "token_identifier_unique";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION next_auth.uid()
 RETURNS uuid
 LANGUAGE sql
 STABLE
AS $function$
  select
    coalesce(
        nullif(current_setting('request.jwt.claim.sub', true), ''),
        (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
    )::uuid
$function$
;


create table "public"."boards" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "last_modified" timestamp without time zone,
    "board" json
);


alter table "public"."boards" enable row level security;

create table "public"."room" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "users_id" uuid,
    "current_player" uuid,
    "board_id" bigint
);


alter table "public"."room" enable row level security;

CREATE UNIQUE INDEX boards_pkey ON public.boards USING btree (id);

CREATE UNIQUE INDEX room_pkey ON public.room USING btree (id);

alter table "public"."boards" add constraint "boards_pkey" PRIMARY KEY using index "boards_pkey";

alter table "public"."room" add constraint "room_pkey" PRIMARY KEY using index "room_pkey";

alter table "public"."room" add constraint "room_board_id_fkey" FOREIGN KEY (board_id) REFERENCES boards(id) ON DELETE CASCADE not valid;

alter table "public"."room" validate constraint "room_board_id_fkey";

alter table "public"."room" add constraint "room_current_player_fkey" FOREIGN KEY (current_player) REFERENCES next_auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."room" validate constraint "room_current_player_fkey";

alter table "public"."room" add constraint "room_users_id_fkey" FOREIGN KEY (users_id) REFERENCES next_auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."room" validate constraint "room_users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.gen_unique_username()
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  numrows int;
  result text;
BEGIN
  result = random_username();
  LOOP
    EXECUTE FORMAT('SELECT 1 FROM %I."users" WHERE %I = %L', 'next_auth', 'userName', result);
    GET DIAGNOSTICS numrows = ROW_COUNT;
    IF numrows = 0 THEN
      RETURN result; 
    END if;
    result = random_string(len);
  END loop;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.random_username()
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
BEGIN
  FOR i IN 1..6 LOOP
    result := result || chars[1 + floor(random() * (array_length(chars, 1) - 1))];
  END LOOP;
  return result;
END;
$function$
;


